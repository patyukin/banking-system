// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: notifier_v1/notifier.proto

package notifier_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifierV1Client is the client API for NotifierV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifierV1Client interface {
	SendSMS(ctx context.Context, in *NotifierRequest, opts ...grpc.CallOption) (*NotifierResponse, error)
}

type notifierV1Client struct {
	cc grpc.ClientConnInterface
}

func NewNotifierV1Client(cc grpc.ClientConnInterface) NotifierV1Client {
	return &notifierV1Client{cc}
}

func (c *notifierV1Client) SendSMS(ctx context.Context, in *NotifierRequest, opts ...grpc.CallOption) (*NotifierResponse, error) {
	out := new(NotifierResponse)
	err := c.cc.Invoke(ctx, "/notifier_v1.NotifierV1/SendSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifierV1Server is the server API for NotifierV1 service.
// All implementations must embed UnimplementedNotifierV1Server
// for forward compatibility
type NotifierV1Server interface {
	SendSMS(context.Context, *NotifierRequest) (*NotifierResponse, error)
	mustEmbedUnimplementedNotifierV1Server()
}

// UnimplementedNotifierV1Server must be embedded to have forward compatible implementations.
type UnimplementedNotifierV1Server struct {
}

func (UnimplementedNotifierV1Server) SendSMS(context.Context, *NotifierRequest) (*NotifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMS not implemented")
}
func (UnimplementedNotifierV1Server) mustEmbedUnimplementedNotifierV1Server() {}

// UnsafeNotifierV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifierV1Server will
// result in compilation errors.
type UnsafeNotifierV1Server interface {
	mustEmbedUnimplementedNotifierV1Server()
}

func RegisterNotifierV1Server(s grpc.ServiceRegistrar, srv NotifierV1Server) {
	s.RegisterService(&NotifierV1_ServiceDesc, srv)
}

func _NotifierV1_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifierV1Server).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notifier_v1.NotifierV1/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifierV1Server).SendSMS(ctx, req.(*NotifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifierV1_ServiceDesc is the grpc.ServiceDesc for NotifierV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifierV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifier_v1.NotifierV1",
	HandlerType: (*NotifierV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSMS",
			Handler:    _NotifierV1_SendSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifier_v1/notifier.proto",
}
